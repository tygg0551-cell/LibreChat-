name: Build and Test

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: build_and_test
  cancel-in-progress: false

jobs:
  build:
    name: "Build"
    runs-on: macos-latest
    permissions:
      actions: read
      contents: read

    outputs:
      build-success: ${{ job.status == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize log capture
        run: |
          mkdir -p $GITHUB_WORKSPACE/github_action_logs
          : > $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Set up Flutter
        if: ${{ success() }}
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter dependencies
        if: ${{ success() }}
        run: |
          set -o pipefail
          { flutter pub get; } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Create environment variables
        if: ${{ success() }}
        run: |
          set -o pipefail
          {
            touch .env
            echo "${{ secrets.ENV }}" > .env
          } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Generate code with build_runner
        if: ${{ success() }}
        run: |
          set -o pipefail
          { dart run build_runner build --delete-conflicting-outputs; } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Decode keystore
        if: ${{ success() }}
        run: |
          set -o pipefail
          {
            mkdir -p android/signing
            touch android/signing/keystore.jks
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/signing/keystore.jks
          } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Create key.properties
        if: ${{ success() }}
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -o pipefail
          {
          cat > key.properties <<EOF
          storeFile=../signing/keystore.jks
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF
          } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Create Firebase config files
        if: ${{ success() }}
        run: |
          set -o pipefail
          mkdir -p android/app ios/Runner lib
          {
            echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > android/app/google-services.json
            echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}" | base64 -d > ios/Runner/GoogleService-Info.plist
            echo "${{ secrets.FIREBASE_OPTIONS_DART }}" | base64 -d > lib/firebase_options.dart
          } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Build APKs
        if: ${{ success() }}
        run: |
          set -o pipefail
          { flutter build apk --release --split-per-abi; } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Build web
        if: ${{ success() }}
        run: |
          set -o pipefail
          { flutter build web --release; } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

      - name: Upload logs artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: github_action_logs/all.log

  # ai-analysis:
  #   name: "AI Analysis"
  #   runs-on: macos-latest
  #   needs: build
  #   if: ${{ always() }}
  #   permissions:
  #     actions: read
  #     contents: write

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         submodules: recursive
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Download logs artifact
  #       if: ${{ always() }}
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-logs
  #         path: github_action_logs/

  #     - name: Set up Python venv
  #       if: ${{ always() }}
  #       run: |
  #         python3 -m venv .venv

  #     - name: Install Python dependencies
  #       if: ${{ always() }}
  #       run: |
  #         . .venv/bin/activate
  #         pip install requests
  #       shell: bash

  #     - name: Prepare Git context
  #       if: ${{ needs.build.outputs.build-success == 'true' }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         set -o pipefail
  #         {
  #           . .venv/bin/activate
  #           python3 .github/ci-scripts/generate_git_context.py \
  #             --token "$GITHUB_TOKEN" \
  #             --workflow-file-name "build-and-test.yml"
  #         } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

  #     - name: Generate changelog
  #       id: generate_changelog
  #       if: ${{ needs.build.outputs.build-success == 'true' }}
  #       env:
  #         COMMIT_INFO_FILE: ${{ env.COMMIT_INFO_FILE }}
  #         DIFF_FILE: ${{ env.DIFF_FILE }}
  #         OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #       run: |
  #         set -o pipefail
  #         {
  #           . .venv/bin/activate
  #           python3 .github/ci-scripts/generate_changelog.py \
  #             --commit-info-file "$COMMIT_INFO_FILE" \
  #             --diff-file "$DIFF_FILE" \
  #             --provider "openai"
  #         } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

  #     - name: Generate code review
  #       id: generate_code_review
  #       if: ${{ needs.build.outputs.build-success == 'true' }}
  #       env:
  #         DIFF_FILE: ${{ env.DIFF_FILE }}
  #         ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  #       run: |
  #         set -o pipefail
  #         {
  #           . .venv/bin/activate
  #           python3 .github/ci-scripts/generate_code_review.py \
  #             --diff-file "$DIFF_FILE" \
  #             --provider "anthropic"
  #         } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

  #     - name: Update Wiki (Success)
  #       if: ${{ needs.build.outputs.build-success == 'true' }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         set -o pipefail
  #         {
  #           . .venv/bin/activate
  #           python3 .github/ci-scripts/update_wiki.py \
  #             --token "$GITHUB_TOKEN" \
  #             --repo "${{ github.repository }}" \
  #             --commit-hash "$(git rev-parse HEAD)" \
  #             --changelog-file "./.github/changelog.json" \
  #             --code-review-file "./.github/code_review.json" \
  #             --success
  #         } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

  #     - name: Generate error analysis
  #       id: generate_error_analysis
  #       if: ${{ needs.build.outputs.build-success != 'true' }}
  #       env:
  #         REPO_NAME: ${{ github.repository }}
  #         OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #       run: |
  #         set -o pipefail
  #         {
  #           LOGS=$(cat $GITHUB_WORKSPACE/github_action_logs/all.log)
  #           if [ -z "$LOGS" ]; then
  #             LOGS="No logs captured. Make sure every step uses tee -a github_action_logs/all.log"
  #           fi

  #           . .venv/bin/activate
  #           python3 .github/ci-scripts/generate_error_analysis.py \
  #             --logs "$LOGS" \
  #             --provider "openai"
  #         } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log

  #     - name: Update Wiki (Failure)
  #       if: ${{ needs.build.outputs.build-success != 'true' }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         set -o pipefail
  #         {
  #           . .venv/bin/activate
  #           python3 .github/ci-scripts/update_wiki.py \
  #             --token "$GITHUB_TOKEN" \
  #             --repo "${{ github.repository }}" \
  #             --commit-hash "$(git rev-parse HEAD)" \
  #             --error-analysis-file "./.github/error_analysis.json" \
  #             --run-id "${{ github.run_id }}" \
  #             --failure
  #         } 2>&1 | tee -a $GITHUB_WORKSPACE/github_action_logs/all.log
